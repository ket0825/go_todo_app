Chap17.

Task: struct로 데이터 model을 설정.
tag로 json에서 사용할 이름 설정.
그에 맞는 메소드 또한 설정.

Helper function: 자주 사용하는 기능을 함수로 만들어 사용.
ex) RespondJson
go-cmp: struct와 map 비교를 위한 라이브러리

Table Driven Test: 테스트 케이스를 테이블로 만들어 테스트하는 방법
.json.golden 파일을 이용하여 테스트 결과를 저장하고 비교하기도 함.

t.Parallel(): 테스트를 병렬로 실행할 수 있도록 함.

http Routing: chi 라이브러리를 이용하여 라우팅을 설정.

cURL Test: -i -XGET url. 
-i를 통해 response header를 확인할 수 있음.
-d .json.golden을 통해 body를 넣어 테스트할 수 있음.

Chap18: MySQL 연동

마이그레이션: DB를 다른 환경으로 옮기거나 구조 수정.

테이블 정의와 마이그레이션 방법 결정: _tools/mysql/schema.sql로 테이블 정의

sqldef: schema.sql을 이용하여 Go 코드로 변환해주는 도구
cnf 파일: DB 연결 정보를 저장하는 파일. mysql.cnf, mysqld.cnf

이렇게 local에서 docker compose로 확인.

이후 github actions를 통해 CI/CD를 구축.

database/sql: Go에서 DB를 다루는 라이브러리 -> jmoiron/sqlx로 확장

인터페이스와 Repository 타입 정의: DB에 접근하는 메소드를 정의

Clock package로 Go의 time.Time은 나노 초 단위의 시간 정밀도로, 비교 시 시간 정보 불일치될 수 있음.

RDBMS 기능 테스트 코드: Mock을 이용하여 테스트 코드 작성
로컬과 github actions에서 테스트 환경이 다르기에 helper function을 이용하여 테스트 코드 작성.

