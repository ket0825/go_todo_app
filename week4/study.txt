https://kukim.tistory.com/190

테스트, 벤치마크, 문서를 언어 차원에서 지원합니다.
Go에서는 테스트, 벤치마크, godoc 생성을 언어 차원에서 지원합니다.

.go 파일이 xxx_test.go 이고 해당 파일의 내용 중 함수명이 Testxxx(), Benchmarkxxx(), Examplexxx() 와 같이 키워드를 붙여 사용할 수 있습니다. 

Error, Panic, Fatal...
- Error는 감안 가능한 에러 핸들링 상황 시에.
- Panic은 런타임 에러. stack trace를 보여주고 종료. recover를 하지 않으면 바로 종료.
- Fatal은 정상적으로 완전히 종료.
- 뱅샐 코드컨벤션을 고려하면 production에는 Error만 사용하는 것이 좋고, Panic과 Fatal은 테스트 코드에서만 사용하는 것이 좋습니다.
- 단, Panic은 맨 처음 initialization 시에만 사용함(ex. 환경변수 설정 실패 시).
- Must로 시작하는 함수만 Panic을 사용합니다.

Panic safe goroutine
- Panic이 발생해도 프로그램이 종료되지 않고, 에러 그룹을 묶어서 한 번에 처리할 수 있습니다.
type PanicSafeGroup struct {
	mu  sync.Mutex
	err *multierror.Error
	wg  sync.WaitGroup
}

func (g *PanicSafeGroup) Go(f func() error) {
	g.wg.Add(1)

	go func() {
		defer g.wg.Done()
		defer func() {
			var err error
			if x := recover(); x != nil { // 초기화 if문. recover()는 panic이 발생했을 때만 값이 있음. 이 if 스코프에서만 작동.
				switch x := x.(type) {
				case error:
					err = x
				default:
					err = errors.Errorf("%s", x)
				}
			}
			if err != nil {
				g.mu.Lock()
				g.err = multierror.Append(g.err, errors.Wrap(err, "recovered"))
				g.mu.Unlock()
			}
		}()

		if err := f(); err != nil {
			g.mu.Lock()
			g.err = multierror.Append(g.err, err)
			g.mu.Unlock()
		}
	}()
}

func (g *PanicSafeGroup) Wait() error {
	g.wg.Wait()
	g.mu.Lock()
	defer g.mu.Unlock()
	return g.err.ErrorOrNil()
}

Beyond the Twelve-Factor App: A Practical Guide 웹서버 구축 시 갖춰야 할 요소들

_test 를 붙이면 테스트 파일로 인식하고, go test 명령어로 테스트를 실행할 수 있습니다.
함수 이름이 Test로 시작하면 테스트 함수로 인식합니다.
테스트 함수는 *testing.T 타입의 인자를 받습니다.
테스트 함수는 t.Error, t.Fail을 이용해 테스트 실패를 알릴 수 있습니다.
테스트 함수는 t.Log를 이용해 로그를 출력할 수 있습니다.
테스트 함수는 t.Helper를 호출해 테스트 함수의 호출 스택을 출력하지 않을 수 있습니다.


